{
    "componentChunkName": "component---src-templates-markdown-layout-tsx",
    "path": "/good-commit-message/",
    "result": {"data":{"markdownRemark":{"html":"<p><img src=\"https://user-images.githubusercontent.com/71566740/133915828-2a45cb95-7be9-4b0e-aace-821865f70c99.png\" alt=\"git\"></p>\n<h2>좋은 Commit Message의 필요성</h2>\n<p>커밋 메시지를 작성할 때는 규칙을 정해놓고 일관성 있게 작성해야 합니다.</p>\n<p><br>코드를 작성하다 보면 간혹 이전 코드를 참고 또는 회귀해야 할 경우가 있습니다.\r\n<br>커밋 수가 적다면 상관없지만 커밋 수가 많아지면 많아질수록 수많은 커밋 기록 중에 원하는 시점을 찾는 것이 어려울 수 있습니다.</p>\n<p><br>또한 다른 사람이 내 커밋 기록을 참고해야 하는 경우가 있을 수도 있습니다.\r\n<br>이러한 경우에 커밋 메시지가 제대로 작성되어 있다면 보다 원활하게 원하는 정보를 찾을 수 있습니다.</p>\n<p><br>커밋 메시지 작성법은 큰 틀은 있지만 개발자분들마다 스타일이 다르고 정확하게 이렇게 작성해야 한다는 규칙은 없습니다.\r\n<br>다음 내용은 Angural Commit Message Format을 기반으로 제 나름대로 보기 편하다고 느낀 구조로 작성하는 것 입니다.</p>\n<h2>Commit Message 구조</h2>\n<ul>\n<li>해당 커밋 메시지의 전체 구조는 emoji를 제외하면 Angural Commit Message Format과 동일합니다.</li>\n<li>header, body, footer는 빈 행으로 구분합니다.</li>\n</ul>\n<br>\n<deckgo-highlight-code   >\n          <code slot=\"code\">&lt;emoji&gt; &lt;type&gt;(&lt;scope&gt;): &lt;short summary&gt; //header\r\n\r\n&lt;body&gt;\r\n\r\n&lt;footer&gt;</code>\n        </deckgo-highlight-code>\n<h2>Header (필수)</h2>\n<h3>😀 Emoji</h3>\n<p>제가 Commit Message에 활용하는 Emoji들의 정보는 <a href=\"https://gitmoji.dev/\">Gitmoji</a>에서 확인 가능합니다.</p>\n<h3>✅ Type</h3>\n<h4>반드시 다음 중 하나여야 합니다.</h4>\n<ul>\n<li><strong>build</strong>: 빌드 시스템 또는 외부 종속성에 영향을 미치는 변경 사항이 있을 때</li>\n<li><strong>ci</strong>: CI 구성 파일 및 스크립트의 변경 사항이 있을 때</li>\n<li><strong>docs</strong>: 단순 문서 수정이 있을 때</li>\n<li><strong>feat</strong>: 새로운 기능 추가가 있을 때</li>\n<li><strong>fix</strong>: 버그 수정이 있을 때</li>\n<li><strong>perf</strong>: 성능 개선이 있는 변경이 있을 때</li>\n<li><strong>refactor</strong>: 버그 수정, 기능 추가, 성능 개선을 제외한 변경이 있을 때</li>\n<li><strong>test</strong>: 테스트 관련 변경이 있을 때</li>\n<li><strong>revert</strong>: 이전 커밋으로 회귀할 때\n<ul>\n<li>type은 revert를 사용하되 short summary는 회귀 대상 커밋의 그것과 같아야 함</li>\n<li>명확한 회귀 이유를 body에 설명해 주어야 함</li>\n<li>회귀 대상의 커밋 SHA 정보를 다음과 같이 body에 표시해 주어야 함<br><code>This reverts commit &#x3C;SHA></code></li>\n</ul>\n</li>\n</ul>\n<h3>🎯 Scope (생략 가능)</h3>\n<p>추가적인 문맥 정보를 제공하기 위한 목적으로 괄호 안에 작성합니다.</p>\n<p><br><a href=\"https://github.com/angular/angular/blob/master/CONTRIBUTING.md#scope\">Angular.js 공식 문서</a>에서는 영향을 받는 npm 모듈명을 작성하라고 했지만 모든 프로젝트가 npm 모듈을 사용하지 않으므로 <strong>어디를 수정했는지</strong> 정도로 보면 될 것 같습니다.</p>\n<p><br> 함수를 수정했으면 해당 함수의 이름, 메소드를 추가했으면 해당 클래스 이름 등 수정 대상을 한눈에 특정할 수 있는 내용이 들어가면 될 것 같습니다.\r\n<br> 추가적으로 커밋 메시지 가이드가 잘 정리된 <a href=\"https://gist.github.com/qoomon/5dfcdf8eec66a051ecd85625518cfd13\">해당 문서</a>에서는 이슈 ID를 적지 말라고 하는군요.</p>\n<h3>📃 Short summary</h3>\n<h4>규칙</h4>\n<ul>\n<li>첫글자를 대문자로 작성하지 않는다.</li>\n<li>50글자 내로 제한한다.</li>\n<li>과거형으로 작성하지 않는다.</li>\n<li>명령문으로 작성한다.</li>\n<li>끝에 특수문자를 사용하지 않는다.\r\n<br>(마침표, 느낌표, 물음표 등)</li>\n</ul>\n<h2>Body (생략 가능)</h2>\n<h4>규칙</h4>\n<ul>\n<li>각 내용의 시작은 <code>*</code>로 시작하고 공백 한칸 띄우고 작성한다.</li>\n<li>각 내용은 72글자 내로 제한한다.</li>\n<li>Header의 short summary와 같이 현재 시제를 사용한다.\n<ul>\n<li>ex) fixes, fixed가 아닌 fix</li>\n</ul>\n</li>\n<li>어떻게 보다는 무엇과 왜를 설명한다.\n<ul>\n<li>변경의 영향을 설명하기 위해 이전 동작과 새 동작을 비교 할 수 있다.</li>\n</ul>\n</li>\n</ul>\n<h2>Footer (생략 가능)</h2>\n<p>이슈 트래킹을 위한 이슈 ID를 작성한다.</p>\n<ul>\n<li>이슈 트래커 ID 작성한다.</li>\n<li>\"유형: #이슈 번호\" 형식으로 작성한다.\n<blockquote>\n<p>Resolves: #123, #1234<br>\r\nSee also: #124</p>\n</blockquote>\n</li>\n<li>여러 개의 이슈 번호를 적을 때는 쉼표로 구분한다.</li>\n<li>이슈 트래커 유형\n<blockquote>\n<p>Fixes: issue 수정중<br>\r\nResovles: issue 해결<br>\r\nRef: 참고할 issue가 있을 때 사용<br>\r\nRelated to: 해당 커밋에 관련된 issue 번호 (아직 해결되지 않은 경우)</p>\n</blockquote>\n</li>\n</ul>\n<h2>자주 쓰이는 영어 단어 목록</h2>\n<p>다음 내용은 summary에 자주 사용하는 영어 단어 목록입니다.\r\n<br>한국 개발자 분이 <a href=\"https://blog.ull.im/engineering/2019/03/10/logs-on-git.html\">해당 포스트</a>에 잘 정리해 주신 글이 있습니다.\r\n<br>해당 원문을 참고하시는걸 추천 드립니다.</p>\n<ul>\n<li>\n<h4>Fix</h4>\n<ul>\n<li>버그, 이슈 등 잘못된 무언가를 고치는 경우</li>\n</ul>\n</li>\n<li>\n<h4>Correct</h4>\n<ul>\n<li>문법 오류, 타입, 이름, 오타 등을 수정하는 경우</li>\n<li>Fix와 비슷하지만 보다 단순한 수정에 자주 쓰임</li>\n</ul>\n</li>\n<li>\n<h4>Remove</h4>\n<ul>\n<li>코드나 파일을 삭제하는 경우</li>\n</ul>\n</li>\n<li>\n<h4>Add</h4>\n<ul>\n<li>새 코드나 파일을 추가하는 경우</li>\n</ul>\n</li>\n<li>\n<h4>Implement</h4>\n<ul>\n<li>무언가를 구현한 경우</li>\n<li>Add와 비슷하지만 좀더 큰 코드 단위 추가에 자주 쓰임</li>\n<li>구현한 대상을 강조할때 사용</li>\n</ul>\n</li>\n<li>\n<h4>Use</h4>\n<ul>\n<li>구현을 위해 무언가를 사용한 경우</li>\n<li>특정 라이브러리나 프레임워크를 사용하기 위한 코드를 추가하는 경우</li>\n</ul>\n</li>\n<li>\n<h4>Refactor</h4>\n<ul>\n<li>코드를 리팩토링 하는 경우</li>\n</ul>\n</li>\n<li>\n<h4>Simplify</h4>\n<ul>\n<li>코드를 단순화 하는 경우</li>\n<li>리팩토링과 비슷하지만 중복 제거 등 단순화만 하는 경우</li>\n</ul>\n</li>\n<li>\n<h4>Update</h4>\n<ul>\n<li>무언가를 업데이트 하는 경우</li>\n</ul>\n</li>\n<li>\n<h4>Revise</h4>\n<ul>\n<li>문서를 개정하는 경우</li>\n</ul>\n</li>\n<li>\n<h4>Improve</h4>\n<ul>\n<li>성능, 구조, 접근성 등을 개선하는 경우</li>\n</ul>\n</li>\n<li>\n<h4>Make</h4>\n<ul>\n<li>기존 동작을 변경하는 경우</li>\n</ul>\n</li>\n<li>\n<h4>Allow</h4>\n<ul>\n<li>특정 동작을 허용하는 경우</li>\n</ul>\n</li>\n<li>\n<h4>Ensure</h4>\n<ul>\n<li>특정 처리를 보장하는 경우</li>\n<li>if문 처럼 조건을 확실하게 제공하는 경우</li>\n</ul>\n</li>\n<li>\n<h4>Prevent</h4>\n<ul>\n<li>특정 처리를 못하게 막는 경우</li>\n</ul>\n</li>\n<li>\n<h4>Avoid</h4>\n<ul>\n<li>특정 처리를 회피하는 경우</li>\n<li>if문 처럼 조건에 따라 특정 동작을 회피하는 경우</li>\n</ul>\n</li>\n<li>\n<h4>Move</h4>\n<ul>\n<li>코드나 파일을 이동하는 경우</li>\n</ul>\n</li>\n<li>\n<h4>Rename</h4>\n<ul>\n<li>파일명을 변경한 경우</li>\n<li>단순 변수명, 함수명 등의 변경만 수행한 경우</li>\n</ul>\n</li>\n<li>\n<h4>Verify</h4>\n<ul>\n<li>검증코드를 추가하는 경우</li>\n</ul>\n</li>\n<li>\n<h4>Set</h4>\n<ul>\n<li>변수, 리터럴, 텍스트 등 단순 값을 변경하는 경우</li>\n</ul>\n</li>\n<li>\n<h4>Pass</h4>\n<ul>\n<li>매개변수를 전달하는 경우</li>\n</ul>\n</li>\n<li>\n<h3>영어로 작성 시</h3>\n<deckgo-highlight-code   >\n          <code slot=\"code\">🐛 Fix(Filter): Fix data filtering method\r\n\r\n* Fix bug that filtering method access parent variables.\r\n* Delete unnecessary code.\r\n\r\nResoloves: #123, #1234</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<h3>한글로 작성 시</h3>\n<deckgo-highlight-code   >\n          <code slot=\"code\">🐛 Fix(필터): 데이터 필터링 메소드 수정\r\n\r\n* 필터링 메소드가 상위 변수에 접근하는 버그 수정\r\n* 불필요한 코드 삭제\r\n\r\nResoloves: #123, #1234</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\r\n해당 포스트는 추가적으로 생각나는 요소가 있다면 내용을 추가 해나갈 예정입니다.","frontmatter":{"emoji":"📝","title":"깃 커밋 메시지 컨벤션 (Git Commit Message Convention)","date":"2021-07-03","description":"제가 사용하는 커밋 메시지 작성 규칙을 공유합니다.","tag":["Git"]},"fields":{"slug":"/good-commit-message/"},"id":"98992a08-a70f-5f2e-b087-f3ddf6331f1d"},"allMarkdownRemark":{"nodes":[{"fields":{"slug":"/gititle-project/"},"frontmatter":{"description":"좋은 커밋 메시지를 작성하기 위한 프로젝트!","title":"Gititle 프로젝트"},"id":"59da09b0-cfe8-5387-8b2c-18728bc48eb5"},{"fields":{"slug":"/sass-compiler/"},"frontmatter":{"description":"non-Node.js 환경에서 Sass를 사용해 봅시다.","title":"Live Sass Compiler 사용하기"},"id":"cddd5b1b-eb1c-5a3a-bf59-e59f20abc909"},{"fields":{"slug":"/nodejs-crawling/"},"frontmatter":{"description":"Node.js에서 크롤링을 이용해 데이터를 수집해보겠습니다.","title":"크롤링을 통한 데이터 수집"},"id":"2a3b304d-fff2-5587-9a14-4f3a1864ba1d"},{"fields":{"slug":"/copilot-review/"},"frontmatter":{"description":"Github의 코딩 AI Copilot을 한 달간 사용해본 경험을 공유합니다.","title":"Copilot 사용 후기"},"id":"8a284f98-aa79-5a11-9f60-17da05b03882"},{"fields":{"slug":"/typescript-express/"},"frontmatter":{"description":"Typescript를 이용해 Express 코드를 작성해봅시다.","title":"Typescript + Express 웹서버 구축하기"},"id":"7de321b0-d894-5d5a-a7e1-058f7c309364"},{"fields":{"slug":"/blog-remake-review1/"},"frontmatter":{"description":"블로그를 다시 만들기 시작하면서 느낀점을 공유합니다.","title":"Next.js에서 Gatsby로 블로그 이사 중간 리뷰"},"id":"4cfa4a82-589b-5649-8fd0-5cbb6f48d40b"},{"fields":{"slug":"/good-commit-message/"},"frontmatter":{"description":"제가 사용하는 커밋 메시지 작성 규칙을 공유합니다.","title":"깃 커밋 메시지 컨벤션 (Git Commit Message Convention)"},"id":"98992a08-a70f-5f2e-b087-f3ddf6331f1d"}]}},"pageContext":{"slug":"/good-commit-message/"}},
    "staticQueryHashes": []}