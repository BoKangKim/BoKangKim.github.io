{
    "componentChunkName": "component---src-templates-markdown-layout-tsx",
    "path": "/typescript-express/",
    "result": {"data":{"markdownRemark":{"html":"<div class=\"center\"><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" style=\"fill:#3178C6\"><title>TypeScript</title><path d=\"M1.125 0C.502 0 0 .502 0 1.125v21.75C0 23.498.502 24 1.125 24h21.75c.623 0 1.125-.502 1.125-1.125V1.125C24 .502 23.498 0 22.875 0zm17.363 9.75c.612 0 1.154.037 1.627.111a6.38 6.38 0 0 1 1.306.34v2.458a3.95 3.95 0 0 0-.643-.361 5.093 5.093 0 0 0-.717-.26 5.453 5.453 0 0 0-1.426-.2c-.3 0-.573.028-.819.086a2.1 2.1 0 0 0-.623.242c-.17.104-.3.229-.393.374a.888.888 0 0 0-.14.49c0 .196.053.373.156.529.104.156.252.304.443.444s.423.276.696.41c.273.135.582.274.926.416.47.197.892.407 1.266.628.374.222.695.473.963.753.268.279.472.598.614.957.142.359.214.776.214 1.253 0 .657-.125 1.21-.373 1.656a3.033 3.033 0 0 1-1.012 1.085 4.38 4.38 0 0 1-1.487.596c-.566.12-1.163.18-1.79.18a9.916 9.916 0 0 1-1.84-.164 5.544 5.544 0 0 1-1.512-.493v-2.63a5.033 5.033 0 0 0 3.237 1.2c.333 0 .624-.03.872-.09.249-.06.456-.144.623-.25.166-.108.29-.234.373-.38a1.023 1.023 0 0 0-.074-1.089 2.12 2.12 0 0 0-.537-.5 5.597 5.597 0 0 0-.807-.444 27.72 27.72 0 0 0-1.007-.436c-.918-.383-1.602-.852-2.053-1.405-.45-.553-.676-1.222-.676-2.005 0-.614.123-1.141.369-1.582.246-.441.58-.804 1.004-1.089a4.494 4.494 0 0 1 1.47-.629 7.536 7.536 0 0 1 1.77-.201zm-15.113.188h9.563v2.166H9.506v9.646H6.789v-9.646H3.375z\"/></svg> <svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" style=\"fill:#000000\"><title>Next.js</title><path d=\"M11.5725 0c-.1763 0-.3098.0013-.3584.0067-.0516.0053-.2159.021-.3636.0328-3.4088.3073-6.6017 2.1463-8.624 4.9728C1.1004 6.584.3802 8.3666.1082 10.255c-.0962.659-.108.8537-.108 1.7474s.012 1.0884.108 1.7476c.652 4.506 3.8591 8.2919 8.2087 9.6945.7789.2511 1.6.4223 2.5337.5255.3636.04 1.9354.04 2.299 0 1.6117-.1783 2.9772-.577 4.3237-1.2643.2065-.1056.2464-.1337.2183-.1573-.0188-.0139-.8987-1.1938-1.9543-2.62l-1.919-2.592-2.4047-3.5583c-1.3231-1.9564-2.4117-3.556-2.4211-3.556-.0094-.0026-.0187 1.5787-.0235 3.509-.0067 3.3802-.0093 3.5162-.0516 3.596-.061.115-.108.1618-.2064.2134-.075.0374-.1408.0445-.495.0445h-.406l-.1078-.068a.4383.4383 0 01-.1572-.1712l-.0493-.1056.0053-4.703.0067-4.7054.0726-.0915c.0376-.0493.1174-.1125.1736-.143.0962-.047.1338-.0517.5396-.0517.4787 0 .5584.0187.6827.1547.0353.0377 1.3373 1.9987 2.895 4.3608a10760.433 10760.433 0 004.7344 7.1706l1.9002 2.8782.096-.0633c.8518-.5536 1.7525-1.3418 2.4657-2.1627 1.5179-1.7429 2.4963-3.868 2.8247-6.134.0961-.6591.1078-.854.1078-1.7475 0-.8937-.012-1.0884-.1078-1.7476-.6522-4.506-3.8592-8.2919-8.2087-9.6945-.7672-.2487-1.5836-.42-2.4985-.5232-.169-.0176-1.0835-.0366-1.6123-.037zm4.0685 7.217c.3473 0 .4082.0053.4857.047.1127.0562.204.1642.237.2767.0186.061.0234 1.3653.0186 4.3044l-.0067 4.2175-.7436-1.14-.7461-1.14v-3.066c0-1.982.0093-3.0963.0234-3.1502.0375-.1313.1196-.2346.2323-.2955.0961-.0494.1313-.054.4997-.054z\"/></svg><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" style=\"fill:#181717\"><title>GitHub</title><path d=\"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12\"/></svg></div>\n<h2>Typescript를 사용하는 이유</h2>\n<p>저는 Node.js 사용할 때 Javascript보다는 Typescript를 선호합니다.\r\n<br>여러 가지 이유가 있겠지만 Javascript는 보통 실행되는 프로그램을 보면서 오류를 잡거나 따로 디버깅을 하는데 Typescript는 정적 타입을 지원해서 컴파일 단계에서 오류를 찾기 쉬운 점이 가장 큰 것 같습니다.</p>\n<p>데이터 타입이 중요한 서버를 구축할 때는 특히 더 유용하다고 느끼는데 오늘은 Node.js의 대표격인 서버 프레임워크 Express를 Typescript로 작성하기 위한 기본 설정을 다뤄보려 합니다.</p>\n<p>이전에는 Typescript로 Express를 이용할 때는 코드는 Typescript로 작성하고 이후 해당 코드를 Javascript로 컴파일 후 실행하는 방법을 사용했는데 바로 이전 Toy Project를 진행하면서 <code>ts-node</code>와 <code>nodemon</code>을 이용해 훨씬 편한 개발 환경을 구축할 수 있게 되어 해당 방법으로 진행하겠습니다.</p>\n<h2>설정</h2>\n<h3>전역 모듈 설치</h3>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">$ npm install -g typescript nodemon ts-node</code>\n        </deckgo-highlight-code>\n<ul>\n<li>해당 모듈들은 다른 프로젝트에서 자주 사용해서 전역으로 설치했습니다.</li>\n</ul>\n<h3>프로젝트 생성 및 Typescript 적용</h3>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">$ mkdir &lt;프로젝트 이름&gt;\r\n$ cd &lt;프로젝트 이름&gt;\r\n$ npm init\r\n$ tsc --init\r\n$ mkdir src</code>\n        </deckgo-highlight-code>\n<h3>사용할 node.js 모듈 설치</h3>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">$ npm i express\r\n$ npm i --save-dev @types/express</code>\n        </deckgo-highlight-code>\n<h3>Typescript 컴파일 설정</h3>\n<p>이제 Typescript 컴파일 관련 설정들을 해주어야 합니다.\r\n<br>처음 <code>tsc --init</code>으로 설정 파일이 생성되면 어려 값들이 주석 처리된 상태로 생성되는데 각 설정들의 자세한 내용은 구글링해보시면 자세하게 나옵니다.</p>\n<p>저는 다음과 같이 설정했습니다.</p>\n<deckgo-highlight-code language=\"json\"  >\n          <code slot=\"code\">{\r\n  &quot;exclude&quot;: [&quot;node_modules&quot;],\r\n  &quot;include&quot;: [&quot;src&quot;],\r\n\r\n  &quot;compilerOptions&quot;: {\r\n    &quot;target&quot;: &quot;ES6&quot;,\r\n    &quot;module&quot;: &quot;commonjs&quot;,\r\n    &quot;sourceMap&quot;: true,\r\n    &quot;outDir&quot;: &quot;dist&quot;,\r\n    &quot;strict&quot;: true,\r\n    &quot;moduleResolution&quot;: &quot;node&quot;,\r\n    &quot;esModuleInterop&quot;: true,\r\n    &quot;skipLibCheck&quot;: true,\r\n    &quot;forceConsistentCasingInFileNames&quot;: true\r\n  }\r\n}</code>\n        </deckgo-highlight-code>\n<h3>start 스크립트 추가</h3>\n<p>이전에 <code>tsc</code>를 사용할 때는 컴파일만 지원한다면 <code>ts-node</code>는 컴파일+실행까지 지원해 줍니다.\r\n<br>추가로 <code>nodemon</code>은 파일의 변화를 감지하여 자동으로 결과물을 Refresh 해줍니다.</p>\n<p>다음과 같이 해당 모듈들을 이용해 실행할 수 있는 스크립트를 추가해 줍니다.</p>\n<deckgo-highlight-code language=\"json\"  >\n          <code slot=\"code\">&quot;scripts&quot;: {\r\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,\r\n    &quot;start&quot;: &quot;nodemon --exec ts-node src/app.ts&quot; //해당 스크립트 추가\r\n  }</code>\n        </deckgo-highlight-code>\n<h3>app.ts 예시 코드</h3>\n<p>프로젝트 root 폴더 내 생성해둔 src 폴더 안에 app.ts 파일을 생성 후 다음과 같은 코드를 작성합니다.</p>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">import express from &quot;express&quot;;\r\nconst exp = express();\r\nconst port = 3000;\r\nexp.listen(port, () =&gt; {\r\n  console.log(`Server listening on port ${port}`);\r\n});\r\n\r\nexp.get(&quot;/&quot;, (req, res) =&gt; {\r\n  const name = !req.query.name ? &quot;World&quot; : req.query.name;\r\n  res.send(`Hello ${name}`);\r\n});</code>\n        </deckgo-highlight-code>\n<p><code>$ npm start</code>로 서버를 작동시키고 <code>http://localhost:3000/</code>로 접속하면 <code>Hello World</code>가 출력됩니다.\r\n<br>만약 <code>http://localhost:3000/?name=Nagle</code> 이런 식으로 쿼리 값을 주게 된다면 <code>Hello Nagle</code>이 출력됩니다.</p>\n<h2>마지막으로</h2>\n<p>저는 토이 프로젝트에 Typescript, Express, GraphQL을 이용하는 경우가 종종 있습니다.\r\n<br> cli를 지원하지 않는 자주 사용하는 조합은 초기 설정을 마치고 Github에 올려놓고 필요할 때 clone 해서 일부 수정 후 사용하는 방법으로 이용하면 편리합니다.</p>","frontmatter":{"emoji":"📢","title":"Typescript + Express 웹서버 구축하기","date":"2021-08-12","description":"Typescript를 이용해 Express 코드를 작성해봅시다.","tag":["Backend","Typescript"]},"fields":{"slug":"/typescript-express/"},"id":"7de321b0-d894-5d5a-a7e1-058f7c309364"},"allMarkdownRemark":{"nodes":[{"fields":{"slug":"/sass-compiler/"},"frontmatter":{"description":"non-Node.js 환경에서 Sass를 사용해 봅시다.","title":"Live Sass Compiler 사용하기"},"id":"cddd5b1b-eb1c-5a3a-bf59-e59f20abc909"},{"fields":{"slug":"/nodejs-crawling/"},"frontmatter":{"description":"Node.js에서 크롤링을 이용해 데이터를 수집해보겠습니다.","title":"크롤링을 통한 데이터 수집"},"id":"2a3b304d-fff2-5587-9a14-4f3a1864ba1d"},{"fields":{"slug":"/copilot-review/"},"frontmatter":{"description":"Github의 코딩 AI Copilot을 한 달간 사용해본 경험을 공유합니다.","title":"Copilot 사용 후기"},"id":"8a284f98-aa79-5a11-9f60-17da05b03882"},{"fields":{"slug":"/typescript-express/"},"frontmatter":{"description":"Typescript를 이용해 Express 코드를 작성해봅시다.","title":"Typescript + Express 웹서버 구축하기"},"id":"7de321b0-d894-5d5a-a7e1-058f7c309364"},{"fields":{"slug":"/blog-remake-review1/"},"frontmatter":{"description":"블로그를 다시 만들기 시작하면서 느낀점을 공유합니다.","title":"블로그 제작 중간 리뷰"},"id":"4cfa4a82-589b-5649-8fd0-5cbb6f48d40b"},{"fields":{"slug":"/good-commit-message/"},"frontmatter":{"description":"커밋 메시지 작성 규칙을 공유합니다.","title":"좋은 커밋 메시지 작성하기"},"id":"98992a08-a70f-5f2e-b087-f3ddf6331f1d"}]}},"pageContext":{"slug":"/typescript-express/"}},
    "staticQueryHashes": []}