{
    "componentChunkName": "component---src-templates-markdown-layout-tsx",
    "path": "/typescript-express/",
    "result": {"data":{"markdownRemark":{"html":"<h2>Typescript를 사용하는 이유</h2>\n<p>저는 Node.js 사용할 때 Javascript보다는 Typescript를 선호합니다.\r\n<br>여러 가지 이유가 있겠지만 Javascript는 보통 실행되는 프로그램을 보면서 오류를 잡거나 따로 디버깅을 하는데 Typescript는 정적 타입을 지원해서 컴파일 단계에서 오류를 찾기 쉬운 점이 가장 큰 것 같습니다.</p>\n<p>데이터 타입이 중요한 서버를 구축할 때는 특히 더 유용하다고 느끼는데 오늘은 Node.js의 대표격인 서버 프레임워크 Express를 Typescript로 작성하기 위한 기본 설정을 다뤄보려 합니다.</p>\n<p>이전에는 Typescript로 Express를 이용할 때는 코드는 Typescript로 작성하고 이후 해당 코드를 Javascript로 컴파일 후 실행하는 방법을 사용했는데 바로 이전 Toy Project를 진행하면서 <code>ts-node</code>와 <code>nodemon</code>을 이용해 훨씬 편한 개발 환경을 구축할 수 있게 되어 해당 방법으로 진행하겠습니다.</p>\n<h2>설정</h2>\n<h3>전역 모듈 설치</h3>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">$ npm install -g typescript nodemon ts-node</code>\n        </deckgo-highlight-code>\n<ul>\n<li>해당 모듈들은 다른 프로젝트에서 자주 사용해서 전역으로 설치했습니다.</li>\n</ul>\n<h3>프로젝트 생성 및 Typescript 적용</h3>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">$ mkdir &lt;프로젝트 이름&gt;\r\n$ cd &lt;프로젝트 이름&gt;\r\n$ npm init\r\n$ tsc --init\r\n$ mkdir src</code>\n        </deckgo-highlight-code>\n<h3>사용할 node.js 모듈 설치</h3>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">$ npm i express\r\n$ npm i --save-dev @types/express</code>\n        </deckgo-highlight-code>\n<h3>Typescript 컴파일 설정</h3>\n<p>이제 Typescript 컴파일 관련 설정들을 해주어야 합니다.\r\n<br>처음 <code>tsc --init</code>으로 설정 파일이 생성되면 어려 값들이 주석 처리된 상태로 생성되는데 각 설정들의 자세한 내용은 구글링해보시면 자세하게 나옵니다.</p>\n<p>저는 다음과 같이 설정했습니다.</p>\n<deckgo-highlight-code language=\"json\"  >\n          <code slot=\"code\">{\r\n  &quot;exclude&quot;: [&quot;node_modules&quot;],\r\n  &quot;include&quot;: [&quot;src&quot;],\r\n\r\n  &quot;compilerOptions&quot;: {\r\n    &quot;target&quot;: &quot;ES6&quot;,\r\n    &quot;module&quot;: &quot;commonjs&quot;,\r\n    &quot;sourceMap&quot;: true,\r\n    &quot;outDir&quot;: &quot;dist&quot;,\r\n    &quot;strict&quot;: true,\r\n    &quot;moduleResolution&quot;: &quot;node&quot;,\r\n    &quot;esModuleInterop&quot;: true,\r\n    &quot;skipLibCheck&quot;: true,\r\n    &quot;forceConsistentCasingInFileNames&quot;: true\r\n  }\r\n}</code>\n        </deckgo-highlight-code>\n<h3>start 스크립트 추가</h3>\n<p>이전에 <code>tsc</code>를 사용할 때는 컴파일만 지원한다면 <code>ts-node</code>는 컴파일+실행까지 지원해 줍니다.\r\n<br>추가로 <code>nodemon</code>은 파일의 변화를 감지하여 자동으로 결과물을 Refresh 해줍니다.</p>\n<p>다음과 같이 해당 모듈들을 이용해 실행할 수 있는 스크립트를 추가해 줍니다.</p>\n<deckgo-highlight-code language=\"json\"  >\n          <code slot=\"code\">&quot;scripts&quot;: {\r\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,\r\n    &quot;start&quot;: &quot;nodemon --exec ts-node src/app.ts&quot; //해당 스크립트 추가\r\n  }</code>\n        </deckgo-highlight-code>\n<h3>app.ts 예시 코드</h3>\n<p>프로젝트 root 폴더 내 생성해둔 src 폴더 안에 app.ts 파일을 생성 후 다음과 같은 코드를 작성합니다.</p>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">import express from &quot;express&quot;;\r\nconst exp = express();\r\nconst port = 3000;\r\nexp.listen(port, () =&gt; {\r\n  console.log(`Server listening on port ${port}`);\r\n});\r\n\r\nexp.get(&quot;/&quot;, (req, res) =&gt; {\r\n  const name = !req.query.name ? &quot;World&quot; : req.query.name;\r\n  res.send(`Hello ${name}`);\r\n});</code>\n        </deckgo-highlight-code>\n<p><code>$ npm start</code>로 서버를 작동시키고 <code>http://localhost:3000/</code>로 접속하면 <code>Hello World</code>가 출력됩니다.\r\n<br>만약 <code>http://localhost:3000/?name=Nagle</code> 이런 식으로 쿼리 값을 주게 된다면 <code>Hello Nagle</code>이 출력됩니다.</p>\n<h2>마지막으로</h2>\n<p>저는 토이 프로젝트에 Typescript, Express, GraphQL을 이용하는 경우가 종종 있습니다.\r\n<br> cli를 지원하지 않는 자주 사용하는 조합은 초기 설정을 마치고 Github에 올려놓고 필요할 때 clone 해서 일부 수정 후 사용하는 방법으로 이용하면 편리합니다.</p>","frontmatter":{"emoji":"📢","title":"Typescript + Express 설정하기","date":"2021-08-12","description":"Typescript를 이용한 Express 설정을 공유합니다.","tag":["Backend","Typescript"]},"fields":{"slug":"/typescript-express/"},"id":"7de321b0-d894-5d5a-a7e1-058f7c309364"},"allMarkdownRemark":{"nodes":[{"fields":{"slug":"/nodejs-crawling/"},"frontmatter":{"description":"Node.js에서 크롤링을 이용해 데이터를 수집해보겠습니다.","title":"크롤링을 통한 데이터 수집"},"id":"2a3b304d-fff2-5587-9a14-4f3a1864ba1d"},{"fields":{"slug":"/copilot-review/"},"frontmatter":{"description":"Github의 코딩 AI Copilot을 한 달간 사용해본 경험을 공유합니다.","title":"Copilot 사용 후기"},"id":"8a284f98-aa79-5a11-9f60-17da05b03882"},{"fields":{"slug":"/typescript-express/"},"frontmatter":{"description":"Typescript를 이용한 Express 설정을 공유합니다.","title":"Typescript + Express 설정하기"},"id":"7de321b0-d894-5d5a-a7e1-058f7c309364"},{"fields":{"slug":"/blog-remake-review1/"},"frontmatter":{"description":"블로그를 다시 만들기 시작하면서 느낀점을 공유합니다.","title":"블로그 제작 중간 리뷰"},"id":"4cfa4a82-589b-5649-8fd0-5cbb6f48d40b"},{"fields":{"slug":"/good-commit-message/"},"frontmatter":{"description":"커밋 메시지 작성 규칙을 공유합니다.","title":"좋은 커밋 메시지 작성하기"},"id":"98992a08-a70f-5f2e-b087-f3ddf6331f1d"}]}},"pageContext":{"slug":"/typescript-express/"}},
    "staticQueryHashes": []}