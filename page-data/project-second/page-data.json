{
    "componentChunkName": "component---src-templates-markdown-layout-tsx",
    "path": "/project-second/",
    "result": {"data":{"markdownRemark":{"html":"<h2>Crawling을 사용한 이유</h2>\n<p>진행 중인 프로젝트는 <a href=\"http://www.kobis.or.kr/kobisopenapi/homepg/main/main.do\">영화진흥위원회</a>에서 제공하는 openAPI에서 주간 박스오피스 데이터를 사용합니다.</p>\n<p>그런데 메인화면과 영화 상세정보에서 사용해야 하는 포스터는 API에서 제공하지 않습니다. 그래서 찾아본 결과로 API에서 제공하는 movieCd 값으로 해당 영화정보의 URL을 받아올 수 있는 것을 확인하였습니다</p>\n<p><code>https://kobis.or.kr/kobis/business/mast/mvie/searchMovieList.do?dtTp=movie&#x26;dtCd=20218052</code></p>\n<p>위의 URL 형식처럼 dtCd= 의 값에 API에서 받아온 movieCd으로 입력을 하면 해당 영화 상세정보 페이지로 이동하여 포스터를 크롤링이 가능하여 사용하게 되었습니다..</p>\n<h2>axios 와 Puppeteer</h2>\n<p>처음에는 axios 와 cheerio를 이용하여 Crawling을 계획 하였었습니다. 하지만 영화 상제정보페이지에 접속시 몇초 후에 제가 원하는 데이터 값이 페이지에 표시 되었습니다. 그래서 cheerio 대신 Puppeteer를 주로 사용하여 Crawling을 하였습니다.</p>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">    const browser = await puppeteer.launch({\r\n        headless: true,\r\n    });\r\n\r\n    const newDataArr = sourceDataArr.map(async (sourceData) =&gt; {\r\n        const targetURL = img_url + sourceData.movieCd;\r\n        const page = await browser.newPage();\r\n        await page.goto(targetURL);\r\n        await page.waitForSelector(\r\n            &quot;#ui-id-1 &gt; div &gt; div.item_tab.basic &gt; div.ovf.info.info1 &gt; a&quot;\r\n        );\r\n        const $ = load(await page.content());\r\n        const newData: NewMovieData = {\r\n            ...sourceData,\r\n            img:\r\n                &quot;https://kobis.or.kr/&quot; +\r\n                $(\r\n                    &quot;#ui-id-1 &gt; div &gt; div.item_tab.basic &gt; div.ovf.info.info1 &gt; a&quot;\r\n                ).attr(&quot;href&quot;),\r\n        };\r\n        page.close();\r\n        return newData;\r\n    });\r\n\r\n});\r\n</code>\n        </deckgo-highlight-code>\n<h2>JavaScript에서 데이터 받기</h2>\n<p>크롤링을 하여 얻은 이미지 데이터를 API에서 받은 json 형식의 데이터와 합쳐서 로컬 서버에 띄워줍니다.</p>\n<p>그 후 JavaScript에서 로컬 서버에 접근하여 해당 데이터를 받은 후 메인페이지에 데이터를 보낸 후 메인페이지에서 볼 수 있도록 하였습니다.</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">fetch(url)\r\n    .then((Response) =&gt; Response.json())\r\n    .then((dataArr) =&gt; {\r\n        const contents = dataArr.map((data) =&gt; {\r\n            const title = data.movieNm;\r\n            const img = data.img;\r\n            console.log(img);\r\n            });</code>\n        </deckgo-highlight-code>\n<h2>메인페이지 화면</h2>\n<img src=\"https://user-images.githubusercontent.com/83346490/140653137-23be9335-263a-43ef-812e-c17590c9e66f.png\" class=\"img large\"/>\n<h3>🤝참고 자료</h3>\n<ul>\n<li>\n<p><a href=\"https://github.com/HyeokjaeLee/korea-webtoon-api\">https://github.com/HyeokjaeLee/korea-webtoon-api</a></p>\n</li>\n<li>\n<p><a href=\"https://hyeokjaelee.github.io/nodejs-crawling/\">https://hyeokjaelee.github.io/nodejs-crawling/</a></p>\n</li>\n</ul>","frontmatter":{"emoji":"🧐","title":"학업: 데이터 베이스 기말 팀프로젝트-2","date":"2021-11-07","description":"영화 토론 게시판-Crawling","tag":["TypeScript","JavaScript","Node.Js"]},"fields":{"slug":"/project-second/"},"id":"f6897876-595d-59f9-be2a-b9a6fd7c2ad1"},"allMarkdownRemark":{"nodes":[{"fields":{"slug":"/blockgame/"},"frontmatter":{"description":"Cocos-2dx엔진을 이용한 게임 개발","title":"게임 개발: 2048 블록 게임 개발 후기"},"id":"2a53d7a7-f15f-55ab-9c71-d5d842cefad1"},{"fields":{"slug":"/project-second/"},"frontmatter":{"description":"영화 토론 게시판-Crawling","title":"학업: 데이터 베이스 기말 팀프로젝트-2"},"id":"f6897876-595d-59f9-be2a-b9a6fd7c2ad1"},{"fields":{"slug":"/project-first/"},"frontmatter":{"description":"데이터 베이스를 이용한 영화 토론 게시판","title":"학업: 데이터 베이스 기말 팀프로젝트-1"},"id":"657337b1-6ba9-592f-9a24-ee2b7ae7c523"},{"fields":{"slug":"/first-post/"},"frontmatter":{"description":"블로그 포스팅 계획","title":"첫 블로그 시작합니다."},"id":"49b775ef-6835-5fb8-8c25-fe7905aebe17"}]}},"pageContext":{"slug":"/project-second/"}},
    "staticQueryHashes": []}